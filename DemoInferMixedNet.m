% Demo to run inference on real dataset
%
% U:	contNodeNum * sampSize, real continuous attributes data.
% V:	discNodeNum * sampSize, real discrete attributes data.
% X:	noisy version of U.
% Y:	noisy version of V.

%% Setting
% I. Datasets with default train-test split using MLC++ GenCVFiles (2/3, 1/3 random).
foldName{1} = './AllDataset/UCI_Adult/adult.';

% II. Datasets without default train-test split, use 'randperm'.
foldName{2} = './AllDataset/UCI_Credit/crx.';
foldName{3} = './AllDataset/UCI_Statlog_AU/australian.';
foldName{4} = './AllDataset/UCI_Statlog_GE/german.';
foldName{5} = './AllDataset/toy'; % synthetic data

% Imputation methods.
imputMethod = {'KNNI'; 'REMI'; 'missForest'; 'RMFI'};

missRange = { 0:13; 0:14; 0:13; 0:19; 0:24 }; % missing with # featDim
noiseRange = 0:5;
randNum = 10;

%%
foldIdx = 2; m_i = 1; n_j = 5; % MODIFY as properly!!!

% ==== Get dataset file name
[~,name,~] = fileparts( foldName{foldIdx} );

% ==== Load ground-truth test data (including labels)
splitRatio = 2/3; % train/test split ratio

[Utrain,Vtrain,U,V,L,lambda] = FuncLoadData(foldName{foldIdx},splitRatio);
[~,nanIdxC] = FuncRemoveNanCol([Utrain;Vtrain]);
Utrain = Utrain(:,~nanIdxC); Vtrain = Vtrain(:,~nanIdxC);

[~,nanIdxC] = FuncRemoveNanCol([U;V]);
U = U(:,~nanIdxC); V = V(:,~nanIdxC); % instances without missing values

% ==== Load noisy data generated by 'GenMissNoisyData.m'
missRatio = missRange{foldIdx}(m_i);
noiseRatio = [0.1, 0.1] * noiseRange(n_j);
load(sprintf('./AllMissNoisyTest/data/%s_M_%02d_N_%0.1f_%0.1f.mat',...
    name, missRatio, noiseRatio), 'X', 'Y' );

% ==== remove label & choose 1 from 'randNum' sets
V = V(1:end-1,:); X = X{1}; Y = Y{1}(1:end-1,:);

% ==== Denoising
load(sprintf('./AllTrainedModels/%s_Models_RMF.mat', name), 'canoParam');
[sigma2,varphi,param] = FuncParamSetting(canoParam,L(1:end-1),noiseRatio,U);
[Xden,Yden] = FuncInferMixedNet(X,Y,canoParam,sigma2,varphi,param);

%% RMSE, 0-1 Loss evaluation
nanMask = isnan(X);
tmp = (X - U).^2; tmp(nanMask) = 0;
rmseContObs = sqrt(sum(tmp, 1) / param.contNodeNum);
tmp = (Xden - U).^2; tmp(nanMask) = 0;
rmseContInfer = sqrt(sum(tmp, 1) / param.contNodeNum);

lossDiscObs = sum(Y~=V, 1) / param.discNodeNum;
lossDiscInfer = sum(Yden~=V, 1) / param.discNodeNum;

% RMSE Ratio
fprintf('Cont Obs/Infer RMSE Ratio: %4.2f\n',...
    mean(rmseContObs)/mean(rmseContInfer))
fprintf('Disc Obs/Infer RMSE Ratio: %4.2f\n',...
    mean(lossDiscObs)/mean(lossDiscInfer))

% Plot the RMSE, 0-1 Loss
figure(1);
y = [mean(rmseContObs), mean(rmseContInfer); ...
    mean(lossDiscObs), mean(lossDiscInfer)];
bar(y);
set(gca,'XTickLabel',{'Continuous','Discrete'});
ylabel('RMSE, 0-1 Loss');
figure(2);
y = [rmseContObs(:), rmseContInfer(:), ...
    lossDiscObs(:), lossDiscInfer(:)];
type = [repmat({'Continuous'},1,2),repmat({'Discrete'},1,2)];
method = repmat({'Observation','Inference'},1,2);
boxplot(y,{type;method},'colors',repmat('bg',1,2),'factorgap',[30 2]);
ylabel('RMSE, 0-1 Loss');

%% == Visualize the graph
% Use default coordinates OR Automatically optimize
load(sprintf('net_coordinates_%s.mat',name));
% figure(33)
% AdjFull = [param.Adj.UU, param.Adj.UV; param.Adj.UV', param.Adj.VV];
% Labels = {};
% for i=1:param.discNodeNum; Labels{i} = sprintf('v-%d',i); end
% for i=1:param.contNodeNum; Labels{i+param.discNodeNum} = sprintf('u-%d',i); end
% [coordinates] = fr_graph_viz(AdjFull, Labels);
% save(sprintf('net_coordinates_%s.mat',name));

% Choose an example & Define a global colormap range
% MODIFY this properly!!!
glbIdx = 15; % 5;
contVal = U(:); % [U(:); X(:); Xden(:)];
vrtxRg.cont = [floor(min(contVal)), ceil(max(contVal))];
vrtxRg.disc = [1,3];

figure(34);
vrtxWt.cont = U(:,glbIdx);
vrtxWt.disc = V(:,glbIdx);
[he,hv] = PlotMixedNet(param.Adj,coordinates,'vertexWeight',vrtxWt,'vertexRange',vrtxRg,'vertexscale',400,'edgewidth',2);
% saveas(gcf,'netGraphGT.png'); % 'epsc'

figure(35);
vrtxWt.cont = X(:,glbIdx);
vrtxWt.disc = Y(:,glbIdx);
[he,hv] = PlotMixedNet(param.Adj,coordinates,'vertexWeight',vrtxWt,'vertexRange',vrtxRg,'vertexscale',400,'edgewidth',2);
% saveas(gcf,'netGraphObs.png'); % 'epsc'

figure(36);
vrtxWt.cont = Xden(:,glbIdx);
vrtxWt.disc = Yden(:,glbIdx);
[he,hv] = PlotMixedNet(param.Adj,coordinates,'vertexWeight',vrtxWt,'vertexRange',vrtxRg,'vertexscale',400,'edgewidth',2);
% saveas(gcf,'netGraphInfer.png'); % 'epsc'
